using System.Linq;
using System.Collections;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using UnityEngine;
using ECellDive.SceneManagement;

namespace ECellDive
{
    namespace IO
    {
        /// <summary>
        /// Class derived from <see cref="HTTPServer"/>.
        /// Handles the request specific to the FBA server.
        /// </summary>
        [RequireComponent(typeof(FBADiveRoomManager))]
        public class ServerFBASolver : HTTPServer
        {
            public Dictionary<string, float> Fluxes = new Dictionary<string, float>();
            [HideInInspector] public float objectiveValue = 0f;
            private FBADiveRoomManager refFBADiveRoomManager;

            public void Start()
            {
                refFBADiveRoomManager = GetComponent<FBADiveRoomManager>();
            }

            /// <summary>
            /// Builds and sends the URI of the request that should activate the
            /// computation of the FBA on the server.
            /// </summary>
            /// <param name="_modelName">The name of the model as stored
            /// in the server.</param>
            /// <param name="_knockouts">The string listing the names of
            /// the knockedout reactions. The string can be generated by
            /// the <see cref="FBADiveRoomManager"/></param>
            public void GetModelSolution(string _modelName, string _knockouts)
            {
                string requestURL = AddPagesToURL(new string[] { "solve", _modelName });
                if (_knockouts != "")
                {
                    requestURL = AddQueryToURL(requestURL, "knockouts", _knockouts, true);
                }
                StartCoroutine(GetRequest(requestURL));
            }

            /// <summary>
            /// The public interface to ask the server for the FBA.
            /// </summary>
            /// <param name="_modelName">The name of the model as stored
            /// in the server.</param>
            /// <param name="_knockouts">The string listing the names of
            /// the knockedout reactions. The string can be generated by
            /// the <see cref="FBADiveRoomManager"/></param>
            public void SolveModel(string _modelName, string _knockouts)
            {
                StartCoroutine(SolveModelC(_modelName, _knockouts));
            }

            /// <summary>
            /// The coroutine handling the request to the server and the 
            /// parsing of the FBA results if the request was successful.
            /// </summary>
            /// <param name="_modelName">The name of the model as stored
            /// in the server.</param>
            /// <param name="_knockouts">The string listing the names of
            /// the knockedout reactions. The string can be generated by
            /// the <see cref="FBADiveRoomManager"/></param>
            /// <returns></returns>
            private IEnumerator SolveModelC(string _modelName, string _knockouts)
            {
                GetModelSolution(_modelName, _knockouts);

                yield return new WaitUntil(isRequestProcessed);

                if (requestData.requestSuccess)
                {
                    requestData.requestJObject = JObject.Parse(requestData.requestText);
                    JArray jFluxesArray = (JArray)requestData.requestJObject["fluxes"];
                    objectiveValue = requestData.requestJObject["objective_value"].Value<float>();

                    foreach (JArray _flux in jFluxesArray)
                    {
                        Fluxes[_flux.ElementAt(0).Value<string>()] = _flux.ElementAt(1).Value<float>();
                    }
                    refFBADiveRoomManager.ShowComputedFluxes();
                }
            }
        }
    }
}

